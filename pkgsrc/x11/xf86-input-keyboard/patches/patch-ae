$NetBSD$

--- src/nto_KbdMap.c.orig	2012-10-05 18:06:46.000000000 +0000
+++ src/nto_KbdMap.c
@@ -0,0 +1,204 @@
+/* $XFree86$ */
+
+/*
+ * Slightly modified xf86KbdBSD.c which is
+ *
+ * Derived from xf86Kbd.c by S_ren Schmidt (sos@login.dkuug.dk)
+ * which is Copyright 1990,91 by Thomas Roell, Dinkelscherben, Germany.
+ * and from xf86KbdCODrv.c by Holger Veit
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include <X11/X.h>
+#include <X11/Xmd.h>
+#include "input.h"
+#include "scrnintstr.h"
+
+#include "compiler.h"
+
+#include "xf86.h"
+#include "xf86Priv.h"
+#include "xf86_OSlib.h" 
+#include "xf86Xinput.h"
+#include "xf86OSKbd.h"
+#include "atKeynames.h"
+#include "xf86Keymap.h"
+#include "nto_kbd.h"
+
+struct {
+	unsigned char scan;
+	unsigned char mask;
+} defaultMods[] = {
+	{ 0x32, ShiftMask }, /* Shift_L */
+	{ 0x3E, ShiftMask }, /* Shift_R */
+	{ 0x42, LockMask }, /* Caps_Lock */
+	{ 0x25, ControlMask }, /* Control_L */
+	{ 0x6D, ControlMask }, /* Control_R */
+	{ 0x40, Mod1Mask }, /* Alt_L */
+	{ 0x71, Mod1Mask }, /* Alt_R */
+	{ 0x4D, Mod2Mask }, /* Num_Lock */
+	{ 0x4E, Mod5Mask }, /* Scroll_Lock */
+};
+static int num_defaultMods = sizeof(defaultMods)/sizeof(defaultMods[0]);
+
+/* Must have a default xmodmap
+ *  * The following generated (indirectly) from xkeycaps 2.46
+ *  * (http://www.jwz.org/xkeycaps/)
+ *  * This can, of course be changed at runtime with xmodmap
+ *  */
+
+struct {
+	unsigned char   scan;
+	unsigned short  s1, s2, s3, s4;
+} defmap[] = {
+	{ 0x09, XK_Escape, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x0A, XK_1, XK_exclam, NoSymbol, NoSymbol },
+	{ 0x0B, XK_2, XK_at, NoSymbol, NoSymbol },
+	{ 0x0C, XK_3, XK_numbersign, NoSymbol, NoSymbol },
+	{ 0x0D, XK_4, XK_dollar, NoSymbol, NoSymbol },
+	{ 0x0E, XK_5, XK_percent, NoSymbol, NoSymbol },
+	{ 0x0F, XK_6, XK_asciicircum, NoSymbol, NoSymbol },
+	{ 0x10, XK_7, XK_ampersand, NoSymbol, NoSymbol },
+	{ 0x11, XK_8, XK_asterisk, NoSymbol, NoSymbol },
+	{ 0x12, XK_9, XK_parenleft, NoSymbol, NoSymbol },
+	{ 0x13, XK_0, XK_parenright, NoSymbol, NoSymbol },
+	{ 0x14, XK_minus, XK_underscore, NoSymbol, NoSymbol },
+	{ 0x15, XK_equal, XK_plus, NoSymbol, NoSymbol },
+	{ 0x16, XK_BackSpace, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x17, XK_Tab, XK_ISO_Left_Tab, NoSymbol, NoSymbol },
+	{ 0x18, XK_q, XK_Q, NoSymbol, NoSymbol },
+	{ 0x19, XK_w, XK_W, NoSymbol, NoSymbol },
+	{ 0x1A, XK_e, XK_E, NoSymbol, NoSymbol },
+	{ 0x1B, XK_r, XK_R, NoSymbol, NoSymbol },
+	{ 0x1C, XK_t, XK_T, NoSymbol, NoSymbol },
+	{ 0x1D, XK_y, XK_Y, NoSymbol, NoSymbol },
+	{ 0x1E, XK_u, XK_U, NoSymbol, NoSymbol },
+	{ 0x1F, XK_i, XK_I, NoSymbol, NoSymbol },
+	{ 0x20, XK_o, XK_O, NoSymbol, NoSymbol },
+	{ 0x21, XK_p, XK_P, NoSymbol, NoSymbol },
+	{ 0x22, XK_bracketleft, XK_braceleft, NoSymbol, NoSymbol },
+	{ 0x23, XK_bracketright, XK_braceright, NoSymbol, NoSymbol },
+	{ 0x24, XK_Return, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x25, XK_Control_L, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x26, XK_a, XK_A, NoSymbol, NoSymbol },
+	{ 0x27, XK_s, XK_S, NoSymbol, NoSymbol },
+	{ 0x28, XK_d, XK_D, NoSymbol, NoSymbol },
+	{ 0x29, XK_f, XK_F, NoSymbol, NoSymbol },
+	{ 0x2A, XK_g, XK_G, NoSymbol, NoSymbol },
+	{ 0x2B, XK_h, XK_H, NoSymbol, NoSymbol },
+	{ 0x2C, XK_j, XK_J, NoSymbol, NoSymbol },
+	{ 0x2D, XK_k, XK_K, NoSymbol, NoSymbol },
+	{ 0x2E, XK_l, XK_L, NoSymbol, NoSymbol },
+	{ 0x2F, XK_semicolon, XK_colon, NoSymbol, NoSymbol },
+	{ 0x30, XK_apostrophe, XK_quotedbl, NoSymbol, NoSymbol },
+	{ 0x31, XK_grave, XK_asciitilde, NoSymbol, NoSymbol },
+	{ 0x32, XK_Shift_L, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x33, XK_backslash, XK_bar, NoSymbol, NoSymbol },
+	{ 0x34, XK_z, XK_Z, NoSymbol, NoSymbol },
+	{ 0x35, XK_x, XK_X, NoSymbol, NoSymbol },
+	{ 0x36, XK_c, XK_C, NoSymbol, NoSymbol },
+	{ 0x37, XK_v, XK_V, NoSymbol, NoSymbol },
+	{ 0x38, XK_b, XK_B, NoSymbol, NoSymbol },
+	{ 0x39, XK_n, XK_N, NoSymbol, NoSymbol },
+	{ 0x3A, XK_m, XK_M, NoSymbol, NoSymbol },
+	{ 0x3B, XK_comma, XK_less, NoSymbol, NoSymbol },
+	{ 0x3C, XK_period, XK_greater, NoSymbol, NoSymbol },
+	{ 0x3D, XK_slash, XK_question, NoSymbol, NoSymbol },
+	{ 0x3E, XK_Shift_R, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x3F, XK_KP_Multiply, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x40, XK_Alt_L, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x41, XK_space, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x42, XK_Caps_Lock, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x43, XK_F1, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x44, XK_F2, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x45, XK_F3, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x46, XK_F4, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x47, XK_F5, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x48, XK_F6, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x49, XK_F7, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x4A, XK_F8, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x4B, XK_F9, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x4C, XK_F10, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x4D, XK_Num_Lock, XK_Pointer_EnableKeys, NoSymbol, NoSymbol },
+	{ 0x4E, XK_Scroll_Lock, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x4F, XK_KP_Home, XK_KP_7, NoSymbol, NoSymbol },
+	{ 0x50, XK_KP_Up, XK_KP_8, NoSymbol, NoSymbol },
+	{ 0x51, XK_KP_Prior, XK_KP_9, NoSymbol, NoSymbol },
+	{ 0x52, XK_KP_Subtract, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x53, XK_KP_Left, XK_KP_4, NoSymbol, NoSymbol },
+	{ 0x54, XK_KP_Begin, XK_KP_5, NoSymbol, NoSymbol },
+	{ 0x55, XK_KP_Right, XK_KP_6, NoSymbol, NoSymbol },
+	{ 0x56, XK_KP_Add, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x57, XK_KP_End, XK_KP_1, NoSymbol, NoSymbol },
+	{ 0x58, XK_KP_Down, XK_KP_2, NoSymbol, NoSymbol },
+	{ 0x59, XK_KP_Next, XK_KP_3, NoSymbol, NoSymbol },
+	{ 0x5A, XK_KP_Insert, XK_KP_0, NoSymbol, NoSymbol },
+	{ 0x5B, XK_KP_Delete, XK_KP_Decimal, NoSymbol, NoSymbol },
+	{ 0x5F, XK_F11, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x60, XK_F12, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x61, XK_Home, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x62, XK_Up, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x63, XK_Prior, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x64, XK_Left, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x66, XK_Right, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x67, XK_End, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x68, XK_Down, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x69, XK_Next, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x6A, XK_Insert, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x6B, XK_Delete, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x6C, XK_KP_Enter, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x6D, XK_Control_R, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x6E, XK_Pause, XK_Break, NoSymbol, NoSymbol },
+	{ 0x6F, XK_Print, XK_Execute, NoSymbol, NoSymbol },
+	{ 0x70, XK_KP_Divide, NoSymbol, NoSymbol, NoSymbol },
+	{ 0x71, XK_Alt_R, NoSymbol, NoSymbol, NoSymbol },
+};
+static int   num_defmap = sizeof(defmap) / sizeof(defmap[0]);
+
+static KeySym nto_map[MAP_LENGTH * GLYPHS_PER_KEY];
+
+/*
+ * KbdGetMapping --
+ *	Get the national keyboard mapping. The keyboard type is set, a new map
+ *      and the modifiermap is computed.
+ */
+
+void
+KbdGetMapping (InputInfoPtr pInfo, KeySymsPtr pKeySyms, CARD8 *pModMap)
+{
+	KbdDevPtr pKbd = (KbdDevPtr) pInfo->private;
+	KeySym        *k;
+	int           i;
+
+
+	/*
+	 * compute the modifier map
+	 */
+	for (i = 0; i < MAP_LENGTH; i++)
+	  pModMap[i] = NoSymbol;  /* make sure it is restored */
+	
+	for (i = 0; i < num_defaultMods; i++)
+	  pModMap[defaultMods[i].scan] = defaultMods[i].mask;
+	
+	memset(nto_map, 0, sizeof(nto_map));
+	for (i = 0; i < num_defmap; i++) {
+		k = &nto_map[(defmap[i].scan-MIN_KEYCODE) * GLYPHS_PER_KEY];
+		k[0] = defmap[i].s1;
+		k[1] = defmap[i].s2;
+		k[2] = defmap[i].s3;
+		k[3] = defmap[i].s4;
+	}
+	
+	pKbd->wsKbdType = 0;
+	pKbd->RemapScanCode = ATScancode;
+
+	pKeySyms->map        = nto_map;
+	pKeySyms->mapWidth   = GLYPHS_PER_KEY;
+	pKeySyms->minKeyCode = MIN_KEYCODE;
+	pKeySyms->maxKeyCode = MAX_KEYCODE; 
+
+	return;
+}
