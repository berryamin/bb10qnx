/* Copyright (C) 2013 Research In Motion Limited. Proprietary and confidential. */

#ifndef cascades_adaptableextensionplugin_h
#define cascades_adaptableextensionplugin_h

#include <QtDeclarative/QDeclarativeExtensionPlugin>

#include <bb/cascades/bbcascades_global.h>

class QDeclarativeEngine;

namespace bb {
    namespace cascades {

        /*!
         * @brief A base class for asset selection aware QML extension plugins.
         *
         * @c AdaptableExtensionPlugin is an addition to the @c QDeclarativeExtensionPlugin
         * interface that makes it possible to create QML extensions that are loaded
         * dynamically, in a way that allows for asset selection. This allows custom
         * QML types to be made available to the QML engine while selecting the correct
         * component using asset selection.
         *
         * To write a QML extension plugin:
         * - Subclass @c AdaptableExtensionPlugin.
         *   - Implement @c registerExtensionTypes and register types using @c qmlRegisterType().
         *   - Export the class using the @c Q_EXPORT_PLUGIN2() macro.
         * - Create a qmldir file to export the plugin. Do not export QML components here.
         * - Create QML assets inside a subfolder called assets.
         * - Create a qml-api.manifest file in the assets folder using the extension publishing tool.
         * Here's an example qmldir file to register the plugin. Do not register QML components here.
         *
         * @code
         * plugin exampleplugin
         * @endcode
         *
         * To reference a QML type, you can either import it from the registered namespace or
         * reference it through an asset URI. For example, if the extension is registered at
         * com.example.extensions.example, then in QML you would write:
         *
         * @code
         * import com.example.extensions.example.ExampleType 1.0
         * @endcode
         *
         * In C++, if ExampleType is defined in ExampleType.qml, this could be referenced as:
         *
         * @code
         * QmlDocument *qml = QmlDocument::create("asset://com.example.extensions.example/ExampleType.qml");
         * @endcode
         *
         * @xmlonly
         * <apigrouping group="User interface/Resources"/>
         * @endxmlonly
         */
        class BBCASCADES_EXPORT AdaptableExtensionPlugin : public QDeclarativeExtensionPlugin
        {
            Q_OBJECT

        public:

            AdaptableExtensionPlugin(QObject *parent = 0);
            virtual ~AdaptableExtensionPlugin();

            /*!
             * @brief Registers QML types so they are asset-selection aware.
             * Calls registerExtensionTypes to register native types with QML.
             *
             * Warning: If this method is overridden, make sure to call it.
             * Alternatively, use registerExtensionTypes instead.
             *
             * @param uri An identifier generated by the QML engine based on
             * the name and path of the extension's plugin library.
             */
            virtual void registerTypes(const char *uri);

            /*!
             * @brief Registers the QML types in the given uri. Subclasses
             * should implement this to call qmlRegisterType() for all types
             * which are provided by the extension plugin.
             *
             * @param uri An identifier generated by the QML engine based on
             * the name and path of the extension's plugin library.
             */
            virtual void registerExtensionTypes(const char *uri) = 0;
        };

    }
}

#endif // cascades_adaptableextensionplugin_h
